{"ast":null,"code":"import axios from \"axios\";\nimport { GET_PROFILE, GET_PROFILE_FAIL, GET_PROFILE_SUCCESS, LOGIN_FAIL, LOGIN_SUCCESS, LOGIN_USER, LOGOUT, REGISTER_FAIL, REGISTER_SUCCESS, REGISTER_USER, UPDATE_FAIL, UPDATE_SUCCESS, UPDATE_USER, FETCH_ALL_USERS, FETCH_ALL_USERS_SUCCESS, FETCH_ALL_USERS_FAIL, SEE_ALL_PREFERENCES, ADD_PREFERENCES, ADD_PREFERENCES_SUCCESS, ADD_PREFERENCES_FAIL } from \"../constants/action-types\";\nimport { FETCH_ALL_EXPERIENCES, FETCH_ALL_EXPERIENCES_SUCCESS, FETCH_ALL_EXPERIENCES_FAIL, FETCH_EXPERIENCE_DETAILS, FETCH_EXPERIENCE_DETAILS_SUCCESS, FETCH_EXPERIENCE_DETAILS_FAIL, ADD_EXPERIENCE, ADD_EXPERIENCE_SUCCESS, ADD_EXPERIENCE_FAIL, CLEAR_ERRORS, UPDATE_EXPERIENCE_FAIL, UPDATE_EXPERIENCE_SUCCESS, UPDATE_EXPERIENCE, DELETE_EXPERIENCE, DELETE_EXPERIENCE_SUCCESS, DELETE_EXPERIENCE_FAIL } from \"../constants/experienceConstants\";\n\nconst addUser = newUser => async dispatch => {\n  dispatch({\n    type: REGISTER_USER\n  });\n\n  try {\n    const addRes = await axios.post(\"/user/register\", newUser);\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: addRes.data\n    });\n  } catch (error) {\n    dispatch({\n      type: REGISTER_FAIL,\n      payload: error.response.data\n    });\n  }\n};\n\nexport default addUser;\nexport const login = cred => async dispatch => {\n  dispatch({\n    type: LOGIN_USER\n  });\n\n  try {\n    const loginRes = await axios.post(\"/user/login\", cred);\n    localStorage.setItem(\"token\", loginRes.data.token);\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: loginRes.data\n    });\n  } catch (error) {\n    dispatch({\n      type: LOGIN_FAIL,\n      payload: error.response.data\n    });\n  }\n};\nexport const getProfile = () => async dispatch => {\n  const token = localStorage.getItem(\"token\");\n  const config = {\n    headers: {\n      Authorization: token\n    }\n  };\n  dispatch({\n    type: GET_PROFILE\n  });\n\n  try {\n    const isAuth = await axios.get(\"/user/current\", config);\n    dispatch({\n      type: GET_PROFILE_SUCCESS,\n      payload: isAuth.data\n    });\n  } catch (error) {\n    dispatch({\n      type: GET_PROFILE_FAIL,\n      payload: error.response.data\n    });\n  }\n};\nexport const logout = () => dispatch => {\n  localStorage.removeItem(\"token\");\n  dispatch({\n    type: LOGOUT\n  });\n}; //Update User\n\nexport const updateProfile = (id, updatedProfile) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_USER\n    });\n    const {\n      data\n    } = await axios.put(`/user/profile/${id}`, updatedProfile);\n    dispatch({\n      type: UPDATE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_FAIL\n    });\n  }\n};\nexport const getUsers = () => async dispatch => {\n  dispatch({\n    type: FETCH_ALL_USERS\n  });\n\n  try {\n    const {\n      data\n    } = await axios.get(\"/user/users\");\n    dispatch({\n      type: FETCH_ALL_USERS_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_ALL_USERS_FAIL,\n      payload: error.response.data\n    });\n  }\n};\nexport const seePreferences = () => async dispatch => {\n  try {\n    const preferences = await axios.get(\"/user/preferences\");\n    dispatch({\n      type: SEE_ALL_PREFERENCES,\n      payload: preferences.data\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\nexport const addPreferences = (userId, preferenceId) => async dispatch => {\n  dispatch({\n    type: ADD_PREFERENCES\n  });\n\n  try {\n    const {\n      data\n    } = await axios.put(`/user/mypreferences/${userId}`, {\n      preferenceId\n    });\n    dispatch({\n      type: ADD_PREFERENCES_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    console.error(error);\n    dispatch({\n      type: ADD_PREFERENCES_FAIL,\n      payload: error.response\n    });\n  }\n};\nexport const addExperience = newExperience => async dispatch => {\n  dispatch({\n    type: ADD_EXPERIENCE\n  });\n\n  try {\n    const addRes = await axios.post(\"api/experience\", newExperience);\n    dispatch({\n      type: ADD_EXPERIENCE_SUCCESS,\n      payload: addRes.data\n    });\n  } catch (error) {\n    dispatch({\n      type: ADD_EXPERIENCE_FAIL,\n      payload: error.response.data\n    });\n  }\n};\nexport const getExperiences = () => async dispatch => {\n  try {\n    dispatch({\n      type: FETCH_ALL_EXPERIENCES\n    });\n    const {\n      data\n    } = await axios.get(\"/api/experience\");\n    dispatch({\n      type: FETCH_ALL_EXPERIENCES_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: FETCH_ALL_EXPERIENCES_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const getExperienceDetails = id => async dispatch => {\n  dispatch({\n    type: FETCH_EXPERIENCE_DETAILS\n  });\n\n  try {\n    const {\n      data\n    } = await axios.get(`/api/experience/${id}`);\n    dispatch({\n      type: FETCH_EXPERIENCE_DETAILS_SUCCESS,\n      payload: data.experience\n    });\n  } catch (error) {\n    console.log(\"ðŸš€ ~ file: experienceActions.js ~ line 38 ~ getExperienceDetails ~ error\", error);\n    dispatch({\n      type: FETCH_EXPERIENCE_DETAILS_FAIL,\n      payload: error.response.data.message\n    });\n  }\n}; //delete experience\n\nexport const deleteExperience = id => async dispatch => {\n  dispatch({\n    type: DELETE_EXPERIENCE\n  });\n\n  try {\n    const {\n      data\n    } = await axios.delete(`/api/experience/${id}`);\n    dispatch({\n      type: DELETE_EXPERIENCE_SUCCESS,\n      payload: data.success\n    });\n  } catch (error) {\n    console.log(\"ðŸš€ ~ file: experienceActions.js ~ line 38 ~ getExperienceDetails ~ error\", error);\n    dispatch({\n      type: DELETE_EXPERIENCE_FAIL,\n      payload: error.response.data.message\n    });\n  }\n};\nexport const updateExperience = (id, updatedExperience) => async dispatch => {\n  try {\n    dispatch({\n      type: UPDATE_EXPERIENCE\n    });\n    const {\n      data\n    } = await axios.put(`/api/experience/${id}`, updatedExperience);\n    dispatch({\n      type: UPDATE_EXPERIENCE_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: UPDATE_EXPERIENCE_FAIL\n    });\n  }\n}; //clear Errors\n\nexport const clearErrors = () => async dispatch => {\n  dispatch({\n    type: CLEAR_ERRORS\n  });\n};","map":{"version":3,"sources":["C:/Users/zagho/PFE_Git/Full-Project-MERN/client/src/JS/actions/index.js"],"names":["axios","GET_PROFILE","GET_PROFILE_FAIL","GET_PROFILE_SUCCESS","LOGIN_FAIL","LOGIN_SUCCESS","LOGIN_USER","LOGOUT","REGISTER_FAIL","REGISTER_SUCCESS","REGISTER_USER","UPDATE_FAIL","UPDATE_SUCCESS","UPDATE_USER","FETCH_ALL_USERS","FETCH_ALL_USERS_SUCCESS","FETCH_ALL_USERS_FAIL","SEE_ALL_PREFERENCES","ADD_PREFERENCES","ADD_PREFERENCES_SUCCESS","ADD_PREFERENCES_FAIL","FETCH_ALL_EXPERIENCES","FETCH_ALL_EXPERIENCES_SUCCESS","FETCH_ALL_EXPERIENCES_FAIL","FETCH_EXPERIENCE_DETAILS","FETCH_EXPERIENCE_DETAILS_SUCCESS","FETCH_EXPERIENCE_DETAILS_FAIL","ADD_EXPERIENCE","ADD_EXPERIENCE_SUCCESS","ADD_EXPERIENCE_FAIL","CLEAR_ERRORS","UPDATE_EXPERIENCE_FAIL","UPDATE_EXPERIENCE_SUCCESS","UPDATE_EXPERIENCE","DELETE_EXPERIENCE","DELETE_EXPERIENCE_SUCCESS","DELETE_EXPERIENCE_FAIL","addUser","newUser","dispatch","type","addRes","post","payload","data","error","response","login","cred","loginRes","localStorage","setItem","token","getProfile","getItem","config","headers","Authorization","isAuth","get","logout","removeItem","updateProfile","id","updatedProfile","put","getUsers","seePreferences","preferences","console","addPreferences","userId","preferenceId","addExperience","newExperience","getExperiences","message","getExperienceDetails","experience","log","deleteExperience","delete","success","updateExperience","updatedExperience","clearErrors"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\n\r\nimport {\r\n  GET_PROFILE,\r\n  GET_PROFILE_FAIL,\r\n  GET_PROFILE_SUCCESS,\r\n  LOGIN_FAIL,\r\n  LOGIN_SUCCESS,\r\n  LOGIN_USER,\r\n  LOGOUT,\r\n  REGISTER_FAIL,\r\n  REGISTER_SUCCESS,\r\n  REGISTER_USER,\r\n  UPDATE_FAIL,\r\n  UPDATE_SUCCESS,\r\n  UPDATE_USER,\r\n  FETCH_ALL_USERS,\r\n  FETCH_ALL_USERS_SUCCESS,\r\n  FETCH_ALL_USERS_FAIL,\r\n  SEE_ALL_PREFERENCES,\r\n  ADD_PREFERENCES,\r\n  ADD_PREFERENCES_SUCCESS,\r\n  ADD_PREFERENCES_FAIL,\r\n} from \"../constants/action-types\";\r\nimport {\r\n  FETCH_ALL_EXPERIENCES,\r\n  FETCH_ALL_EXPERIENCES_SUCCESS,\r\n  FETCH_ALL_EXPERIENCES_FAIL,\r\n  FETCH_EXPERIENCE_DETAILS,\r\n  FETCH_EXPERIENCE_DETAILS_SUCCESS,\r\n  FETCH_EXPERIENCE_DETAILS_FAIL,\r\n  ADD_EXPERIENCE,\r\n  ADD_EXPERIENCE_SUCCESS,\r\n  ADD_EXPERIENCE_FAIL,\r\n  CLEAR_ERRORS,\r\n  UPDATE_EXPERIENCE_FAIL,\r\n  UPDATE_EXPERIENCE_SUCCESS,\r\n  UPDATE_EXPERIENCE,\r\n  DELETE_EXPERIENCE,\r\n  DELETE_EXPERIENCE_SUCCESS,\r\n  DELETE_EXPERIENCE_FAIL,\r\n} from \"../constants/experienceConstants\";\r\n\r\nconst addUser = (newUser) => async (dispatch) => {\r\n  dispatch({\r\n    type: REGISTER_USER,\r\n  });\r\n  try {\r\n    const addRes = await axios.post(\"/user/register\", newUser);\r\n    dispatch({\r\n      type: REGISTER_SUCCESS,\r\n      payload: addRes.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: REGISTER_FAIL,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n\r\nexport default addUser;\r\n\r\nexport const login = (cred) => async (dispatch) => {\r\n  dispatch({\r\n    type: LOGIN_USER,\r\n  });\r\n\r\n  try {\r\n    const loginRes = await axios.post(\"/user/login\", cred);\r\n    localStorage.setItem(\"token\", loginRes.data.token);\r\n    dispatch({\r\n      type: LOGIN_SUCCESS,\r\n      payload: loginRes.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: LOGIN_FAIL,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getProfile = () => async (dispatch) => {\r\n  const token = localStorage.getItem(\"token\");\r\n  const config = {\r\n    headers: {\r\n      Authorization: token,\r\n    },\r\n  };\r\n  dispatch({\r\n    type: GET_PROFILE,\r\n  });\r\n  try {\r\n    const isAuth = await axios.get(\"/user/current\", config);\r\n    dispatch({\r\n      type: GET_PROFILE_SUCCESS,\r\n      payload: isAuth.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_PROFILE_FAIL,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n\r\nexport const logout = () => (dispatch) => {\r\n  localStorage.removeItem(\"token\");\r\n  dispatch({\r\n    type: LOGOUT,\r\n  });\r\n};\r\n\r\n//Update User\r\nexport const updateProfile = (id, updatedProfile) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: UPDATE_USER,\r\n    });\r\n\r\n    const { data } = await axios.put(`/user/profile/${id}`, updatedProfile);\r\n    dispatch({\r\n      type: UPDATE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: UPDATE_FAIL,\r\n    });\r\n  }\r\n};\r\n\r\nexport const getUsers = () => async (dispatch) => {\r\n  dispatch({ type: FETCH_ALL_USERS });\r\n  try {\r\n    const { data } = await axios.get(\"/user/users\");\r\n    dispatch({\r\n      type: FETCH_ALL_USERS_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: FETCH_ALL_USERS_FAIL,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\n\r\nexport const seePreferences = () => async (dispatch) => {\r\n  try {\r\n    const preferences = await axios.get(\"/user/preferences\");\r\n    dispatch({\r\n      type: SEE_ALL_PREFERENCES,\r\n      payload: preferences.data,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport const addPreferences = (userId, preferenceId) => async (dispatch) => {\r\n  dispatch({\r\n    type: ADD_PREFERENCES,\r\n  });\r\n  try {\r\n    const { data } = await axios.put(`/user/mypreferences/${userId}`, {\r\n      preferenceId,\r\n    });\r\n    dispatch({\r\n      type: ADD_PREFERENCES_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    console.error(error);\r\n    dispatch({\r\n      type: ADD_PREFERENCES_FAIL,\r\n      payload: error.response,\r\n    });\r\n  }\r\n};\r\n\r\nexport const addExperience = (newExperience) => async (dispatch) => {\r\n  dispatch({\r\n    type: ADD_EXPERIENCE,\r\n  });\r\n  try {\r\n    const addRes = await axios.post(\"api/experience\", newExperience);\r\n    dispatch({\r\n      type: ADD_EXPERIENCE_SUCCESS,\r\n      payload: addRes.data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: ADD_EXPERIENCE_FAIL,\r\n      payload: error.response.data,\r\n    });\r\n  }\r\n};\r\nexport const getExperiences = () => async (dispatch) => {\r\n  try {\r\n    dispatch({ type: FETCH_ALL_EXPERIENCES });\r\n    const { data } = await axios.get(\"/api/experience\");\r\n    dispatch({\r\n      type: FETCH_ALL_EXPERIENCES_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: FETCH_ALL_EXPERIENCES_FAIL,\r\n      payload: error.response.data.message,\r\n    });\r\n  }\r\n};\r\nexport const getExperienceDetails = (id) => async (dispatch) => {\r\n  dispatch({ type: FETCH_EXPERIENCE_DETAILS });\r\n  try {\r\n    const { data } = await axios.get(`/api/experience/${id}`);\r\n    dispatch({\r\n      type: FETCH_EXPERIENCE_DETAILS_SUCCESS,\r\n      payload: data.experience,\r\n    });\r\n  } catch (error) {\r\n    console.log(\r\n      \"ðŸš€ ~ file: experienceActions.js ~ line 38 ~ getExperienceDetails ~ error\",\r\n      error\r\n    );\r\n    dispatch({\r\n      type: FETCH_EXPERIENCE_DETAILS_FAIL,\r\n      payload: error.response.data.message,\r\n    });\r\n  }\r\n};\r\n//delete experience\r\nexport const deleteExperience = (id) => async (dispatch) => {\r\n  dispatch({ type: DELETE_EXPERIENCE });\r\n  try {\r\n    const { data } = await axios.delete(`/api/experience/${id}`);\r\n    dispatch({\r\n      type: DELETE_EXPERIENCE_SUCCESS,\r\n      payload: data.success,\r\n    });\r\n  } catch (error) {\r\n    console.log(\r\n      \"ðŸš€ ~ file: experienceActions.js ~ line 38 ~ getExperienceDetails ~ error\",\r\n      error\r\n    );\r\n    dispatch({\r\n      type: DELETE_EXPERIENCE_FAIL,\r\n      payload: error.response.data.message,\r\n    });\r\n  }\r\n};\r\nexport const updateExperience = (id, updatedExperience) => async (dispatch) => {\r\n  try {\r\n    dispatch({\r\n      type: UPDATE_EXPERIENCE,\r\n    });\r\n\r\n    const { data } = await axios.put(\r\n      `/api/experience/${id}`,\r\n      updatedExperience\r\n    );\r\n    dispatch({\r\n      type: UPDATE_EXPERIENCE_SUCCESS,\r\n      payload: data,\r\n    });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: UPDATE_EXPERIENCE_FAIL,\r\n    });\r\n  }\r\n};\r\n//clear Errors\r\nexport const clearErrors = () => async (dispatch) => {\r\n  dispatch({\r\n    type: CLEAR_ERRORS,\r\n  });\r\n};\r\n"]},"metadata":{},"sourceType":"module"}